// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Base user model with role-based authorization
model User {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  email         String   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          Role     @default(MODEL)

  // Credentials provider (optional)
  passwordHash  String?

  accounts      Account[]
  sessions      Session[]

  // Relations
  modelProfile  ModelProfile?
  brandProfile  BrandProfile?

  // relations for bookings
  bookingsCreated Booking[] @relation("BookingsCreated")
  savedModels     SavedModel[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?     @map("expiresAt")
  token_type        String?  @map("tokenType")
  scope             String?
  id_token          String?  @map("idToken")
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Domain profiles
model ModelProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  displayName String
  bio         String?
  location    String?
  avatarUrl   String?

  // measurements (basic)
  heightCm    Int?
  bustCm      Int?     // chest
  waistCm     Int?
  hipsCm      Int?
  shoeEu      Int?
  hair        String?
  eyes        String?
  shirtSize   String?
  pantSize    String?
  shoesSize   String?
  birthDate   DateTime?
  
  // Personal details
  age         Int?

  // filters & status
  category    ModelCategory?
  gender      Gender?
  size        String?
  approved    Boolean  @default(false)
  available   Boolean  @default(true)

  // new fields from application form
  instagramHandle String?
  modelingExperience String?
  categories String? // JSON string for multiple categories

  // media
  photos      Photo[]

  // bookings
  bookings    Booking[]
  savedBy     SavedModel[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BrandProfile {
  id           String  @id @default(cuid())
  userId       String  @unique
  brandName    String
  description  String?
  website      String?
  logoUrl      String?
  city         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Photo {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  createdAt DateTime @default(now())
  modelId   String
  model     ModelProfile @relation(fields: [modelId], references: [id], onDelete: Cascade)
}

// Brand user can save models
model SavedModel {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  brandUserId  String
  modelId      String
  brandUser    User         @relation(fields: [brandUserId], references: [id], onDelete: Cascade)
  model        ModelProfile @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@unique([brandUserId, modelId])
}

enum Role {
  ADMIN
  BRAND
  MODEL
}

enum ModelCategory {
  FASHION
  COMMERCIAL
  FITNESS
  BEAUTY
  RUNWAY
  EDITORIAL
}

enum Gender {
  FEMALE
  MALE
  NON_BINARY
}

// Bookings of a model by a brand/user
model Booking {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  modelId     String
  model       ModelProfile @relation(fields: [modelId], references: [id], onDelete: Cascade)
  createdById String?
  createdBy   User?        @relation("BookingsCreated", fields: [createdById], references: [id])
  startAt     DateTime
  duration    ShotDuration
  selectedDays String? // JSON array of selected days for multiple days bookings
  shootSetting String?
  shootLocation String?
  note        String?
  // requester contact
  requesterName   String
  requesterPhone  String
  requesterBrand  String?
  brandWebsite    String?
  brandInstagram  String?
  requesterEmail  String?
  contactWhatsApp Boolean   @default(false)
  // pricing (EGP)
  offeredBudgetEgp Int?
  status      String       @default("PENDING")
}

enum ShotDuration {
  HALF_DAY
  FULL_DAY
  MULTIPLE_DAYS
}
